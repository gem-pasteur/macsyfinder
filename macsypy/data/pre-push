#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This script check if you push a tag
# if yes check if the tag match to the version decalred in metadata.yml
# if yes it prevents the push until the tag and the version match
#
# This script is widely inspired from https://gist.github.com/farseerfc/0729c08cd7c82b07000f20105f733b17

remote="$1"
url="$2"

tagref=$(grep -Po 'refs/tags/([^ ]*) ' </dev/stdin | head -n1 | cut -c11- | tr -d '[:space:]')

if [[ "$tagref" == ""  ]]; then
    ## NOT pushing tag , exit normally
    exit 0
fi

macsydata check
returncode=$?

if [ $returncode -ne 0 ]; then
    Red=$'\e[1;31m'
    Green=$'\e[1;32m'
    Yello=$'\e[1;33m'
    Clear=$'\e[0m'
    echo "${Green}To fix errors:${Clear}"
    echo "${Red}  1. remove tag:${Clear} git tag -d ${tagref}"
    echo "${Yello}  2. fix errors above ${Clear}"
    echo "${Yello}  3. run 'macsydata check' until everything is fixed ${Clear}"
    echo "${Green}  4. commit your fix:${clear} git add / git commit "
    echo "${Green}  5. tag again:${Clear} git tag -a ${tagref}"
    echo "${Green}  6. and push:${Clear} git push ${remote} ${tagref}"
fi

exit $returncode
